/\
Example a Swing application.
(34.4;p734)

import swing._
import event._

object TempConverter extends SimpleSwingApplication {
  def top = new MainFrame {
    title = "Celsius/Fahrenheit Converter"
    object celsius extends TextField { columns = 5 }
    object fahrenheit extends TextField { columns = 5 }
    contents = new FlowPanel {
      contents += celsius
      contents += new Label(" Celsius = ")
      contents += fahrenheit
      contents += new Label(" Fahrenheit")
      border = Swing.EmptyBorder(15, 10, 10, 10)
    }
    listenTo(celsius, fahrenheit)
    reactions += {
      case EditDone(`fahrenheit`) =>
        val f = fahrenheit.text.toInt
        val c = (f - 32) * 5 / 9
        celsius.text = c.toString
      case EditDone(`celsius`) =>
        val c = celsius.text.toInt
        val f = c * 9 / 5 + 32
        fahrenheit.text = f.toString
    }
  }
}

TempConverter.main(Array[String]())

/\
why the following is the same?
import swing._
import scala.swing._
(34.4;p734)

- everything in package scala imported automatically,
- package scala.swing is contained in package scala.

/\
What is scala.swing.Reactor?
(34.4;p734)

- trait Reactor extends AnyRef,
- listens to events from registered publishers,
- members: deafTo, listenTo, reactions.

/\
What is scala.swing.Reactor.reactions?
(34.4;p734)

- collection of handlers,
- handler: PartialFunction[Event, Unit], (Event) => Unit,
- handler: matches on events and performs some actions.
