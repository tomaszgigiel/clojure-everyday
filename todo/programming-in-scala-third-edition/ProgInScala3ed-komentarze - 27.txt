/\
List standard annotations.
(27.3;p641)

@deprecated("use newShinyMethod() instead")
def bigMistake() = 1

class Person(@volatile var name: String) {
  def set(changedName: String) {
    name = changedName
  }
}

@SerialVersionUID(100L)
class Stock(var symbol: String, var price: BigDecimal) extends Serializable {
    @transient var abc = 1
    // code here ...
}

class Person(@BeanProperty var firstName: String, @BeanProperty var lastName: String) {
  override def toString: String = return format("%s, %s", firstName, lastName)
}

@scala.annotation.tailrec
def gcd(a: Int, b: Int): Int = if (b == 0) a else gcd(b, a % b)

def describe(e: Any): String = (e: @unchecked) match {
  case _: Int => "a number"
  case _: String => "a string"
}

@native
def beginCountdown() = {}

/\
Discuss "@switch" anotation.
(https://alvinalexander.com/scala/using-match-expression-like-switch-statement)

An annotation to be applied to a match expression.
If present, the compiler will verify that the match has been compiled to a tableswitch or lookupswitch, 
and issue an error if it instead compiles into a series of conditional expressions.

import scala.annotation.switch

class SwitchDemo {
  val i = 1
  val x = (i: @switch) match {
    case 1  => "One"
    case 2  => "Two"
    case _  => "Other"
  }

}

scalac SwitchDemo.scala
javap -c SwitchDemo

16:  tableswitch{ //1 to 2
            1: 50;
            2: 45;
            default: 40 }

vs.

class SwitchDemo {
  val i = 1
  val Two = 2                     // added
  val x = (i: @switch) match {
    case 1  => "One"
    case Two => "Two"             // replaced the '2'
    case _  => "Other"
  }

}

