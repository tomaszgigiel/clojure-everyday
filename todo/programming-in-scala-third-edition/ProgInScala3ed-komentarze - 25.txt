/\
What are terms releted with collection operations?
(25.1;p597)

Almost all collection operations are implemented in terms of traversals and builders.
traversals - Traversable’s foreach method,
builders - Builder.

/\
How is the new collections building handled by?
(25.1;p598)

The new collections building is handled by instances of class Builder:

package scala.collection.generic
class Builder[-Elem, +To] {
  def +=(elem: Elem): this.type
  def result(): To
  def clear()
  def mapResult[NewTo](f: To => NewTo): Builder[Elem, NewTo] = ...
}

/\
Explain scala.collection.generic.Builder::mapResult.
(25.1;p598)

To transform the result of the other builder, i.e.:
bldr is a builder for arrays

val buf = new ArrayBuffer[Int]
buf: scala.collection.mutable.ArrayBuffer[Int] = ArrayBuffer()
val bldr = buf mapResult (_.toArray)
bldr: scala.collection.mutable.Builder[Int,Array[Int]] = ArrayBuffer()

/\
Examples of flexibility in transformation methods on a collection.
(25.2;p599)

val bits = BitSet(1, 2, 3)
bits map (_ * 2) // BitSet(2, 4, 6)
bits map (_.toFloat) // Set(1.0, 2.0, 3.0)
Map("a" -> 1, "b" -> 2) map { case (x, y) => (y, x) } // scala.collection.immutable.Map[Int,java.lang.String] = Map(1 -> a, 2 -> b)
Map("a" -> 1, "b" -> 2) map { case (x, y) => y } // scala.collection.immutable.Iterable[Int] = List(1, 2)

/\
Explain implementation of common operations in collections.
(25.2;p599)

Scala uses traits:
IndexedSeqLike for IndexedSeq,
TraversableLike for Traversable ...

package scala.collection

trait TraversableLike[+Elem, +Repr] {
  def newBuilder: Builder[Elem, Repr] // deferred
  def foreach[U](f: Elem => U) // deferred
  ...
  def filter(p: Elem => Boolean): Repr = {
    val b = newBuilder
    foreach { elem => if (p(elem)) b += elem }
    b.result
  }

  def map[B, That](f: Elem => B)(implicit bf: CanBuildFrom[Repr, B, That]): That = {
    val b = bf(this)
    for (x <this)
    b += f(x)
    b.result
  }
}

package scala.collection.generic

trait CanBuildFrom[-From, -Elem, +To] {
  // Creates a new builder
  def apply(from: From): Builder[Elem, To]
}

/\
Implement custom collection.
(25.3;p612)

final class RNA private (val groups: Array[Int], val length: Int)
  extends IndexedSeq[Base] with IndexedSeqLike[Base, RNA] {
  import RNA._
  // Mandatory reimplementation of ‘newBuilder‘ in ‘IndexedSeq‘
  override protected[this] def newBuilder: Builder[Base, RNA] = RNA.newBuilder
  // Mandatory implementation of ‘apply‘ in ‘IndexedSeq‘
  def apply(idx: Int): Base = {
    if (idx < 0 || length <= idx) throw new IndexOutOfBoundsException
    Base.fromInt(groups(idx / N) >> (idx % N * S) & M)
  }
  // Optional reimplementation of foreach, to make it more efficient.
  override def foreach[U](f: Base => U): Unit = {
    var i = 0
    var b = 0
    while (i < length) {
      b = if (i % N == 0) groups(i / N) else b >>> S
      f(Base.fromInt(b & M))
      i += 1
    }
  }
}

object RNA {
  private val S = 2 // number of bits in group
  private val M = (1 << S) - 1 // bitmask to isolate a group
  private val N = 32 / S // number of groups in an Int
  def fromSeq(buf: Seq[Base]): RNA = {
    val groups = new Array[Int]((buf.length + N - 1) / N)
    for (i <- 0 until buf.length)
      groups(i / N) |= Base.toInt(buf(i)) << (i % N * S)
    new RNA(groups, buf.length)
  }
  def apply(bases: Base*) = fromSeq(bases)
  def newBuilder: Builder[Base, RNA] = new ArrayBuffer mapResult fromSeq
  implicit def canBuildFrom: CanBuildFrom[RNA, Base, RNA] =
    new CanBuildFrom[RNA, Base, RNA] {
      def apply(): Builder[Base, RNA] = newBuilder
      def apply(from: RNA): Builder[Base, RNA] = newBuilder
    }
}

/\
Why foreach is such important in a collection implementation?
(25.3;p614)

- it implements loops over collections,
- many other collection methods are implemented in terms of foreach.

/\
Explein Patricia trie.
(25.3;p616)

Store a set or a map as a tree where subsequent characters in a search key determines uniquely a descendant tree.
val m = PrefixMap("abc" -> 0, "abd" -> 1, "al" -> 2, "all" -> 3, "xy" -> 4)

root
+-a
| +-b-c(0)
| | +-d(1)
| +-l(2)-l(3)
|-x-y(4)

/\
Implement Patricia trie.
(25.3;p616)

import collection._
class PrefixMap[T] extends mutable.Map[String, T] with mutable.MapLike[String, T, PrefixMap[T]] {
  var suffixes: immutable.Map[Char, PrefixMap[T]] = Map.empty
  var value: Option[T] = None
  def get(s: String): Option[T] = if (s.isEmpty) value else suffixes get (s(0)) flatMap (_.get(s substring 1))
  def withPrefix(s: String): PrefixMap[T] =
    if (s.isEmpty) this
    else {
      val leading = s(0)
      suffixes get leading match {
        case None => suffixes = suffixes + (leading -> empty)
        case _ =>
      }
      suffixes(leading) withPrefix (s substring 1)
    }
    override def update(s: String, elem: T) = withPrefix(s).value = Some(elem)
    override def remove(s: String): Option[T] =
      if (s.isEmpty) { val prev = value; value = None; prev }
      else suffixes get (s(0)) flatMap (_.remove(s substring 1))
    def iterator: Iterator[(String, T)] =
      (for (v <- value.iterator) yield ("", v)) ++
      (for ((chr, m) <- suffixes.iterator; (s, v) <- m.iterator) yield (chr +: s, v))
    def += (kv: (String, T)): this.type = { update(kv._1, kv._2); this }
    def -= (s: String): this.type = { remove(s); this }
    override def empty = new PrefixMap[T]
}

import scala.collection.mutable.{Builder, MapBuilder}
import scala.collection.generic.CanBuildFrom
object PrefixMap {
  def empty[T] = new PrefixMap[T]
  def apply[T](kvs: (String, T)*): PrefixMap[T] = {
    val m: PrefixMap[T] = empty
    for (kv <- kvs) m += kv
    m
  }
  def newBuilder[T]: Builder[(String, T), PrefixMap[T]] = new MapBuilder[String, T, PrefixMap[T]](empty)
  implicit def canBuildFrom[T] : CanBuildFrom[PrefixMap[_], (String, T), PrefixMap[T]] =
    new CanBuildFrom[PrefixMap[_], (String, T), PrefixMap[T]] {
      def apply(from: PrefixMap[_]) = newBuilder[T]
      def apply() = newBuilder[T]
    }
}

val m = PrefixMap("abc" -> 0, "abd" -> 1, "al" -> 2, "all" -> 3, "xy" -> 4)

/\
Explein "iterator" in Patricia trie implementation.
(25.3;p616)

def iterator: Iterator[(String, T)] =
  (for (v <- value.iterator; _ = println("1:" + v)) yield ("", v)) ++
  (for ((chr, m) <- suffixes.iterator; _ = println("2:" + chr); (s, v) <- m.iterator; _ = println("3:" + s)) yield (chr +: s, v))

scala> val m = PrefixMap("abc" -> 0, "abd" -> 1, "al" -> 2, "all" -> 3, "xy" -> 4)
2:a // go deeper
2:b // go deeper
2:c // go deeper
1:0 // there is value
// no deeper, because suffixes is null
3: // for chr == 'c' (deepest)
3:c // for chr == 'b' (deeper)
3:bc // for chr == 'a' (deep)

2:d // go deeper, branch "b"
1:1 // there is value
// no deeper, because suffixes is null
3: // for chr == 'd' (deepest)
3:d // for chr == 'b' (deeper)
3:bd // for chr == 'a' (deep)

2:l
1:2
3:
3:l

2:l
1:3
3:
3:l
3:ll

2:x
2:y
1:4
3:
3:y

/\
Why is an immutable map better in the implementation type for suffixes iterator in Patricia trie implementation.
(25.3;p617)

var suffixes: immutable.Map[Char, PrefixMap[T]] = Map.empty

The immutable maps that contain only a few elements are very efficient in both space and execution time.
The maps that contain fewer than 5 elements are represented as a single object.
The HashMap if it is empty occupies around 80 bytes.

/\
Explein "get" in Patricia trie implementation.
(25.3;p617)

var suffixes: immutable.Map[Char, PrefixMap[T]] = Map.empty
var value: Option[T] = None
...
def get(s: String): Option[T] = 
  if (s.isEmpty) value 
  else suffixes get (s(0)) flatMap (_.get(s substring 1))

if string is empty -> return value
get "sub PrefixMap" based on first letter
on "sub PrefixMap" recursive get, but string without first letter

subPrefixMap flatMap (subPrefixMap flatMap (value)) -> value
None flatMap ... -> None
... flatMap None -> None

val m1 = Map("a" -> 0, "b" -> 1, "c" -> 2)
m1.get("z") flatMap (_ => Option(1)) // Option[Int] = None
==
(m1.get("z") map (_ => Option(1))).flatten // before flatten: Option[Option[Int]] = None

/\
Why in Patricia trie implementation no newBuilder method?
(25.3;p618)

Because maps and sets come with default builders, which are instances of class MapBuilder.
