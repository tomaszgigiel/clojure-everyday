/\
Implement "map" (use ::).

def walk(l: List[Int], f: Int => Int): List[Int] = {
  // @annotation.tailrec
  def loop(l: List[Int]): List[Int] = {
    l match {
      case Nil     => Nil
      case h :: t  => f(h) :: loop(t)
    }
  }
  loop(l)
}
walk(List.fill(99)(1), _ + 1)

/\
Explein:

List(1, 3, 8).foldLeft(100)(_ - _) == ((100 - 1) - 3) - 8 == 88
List(1, 3, 8).foldRight(100)(_ - _) == 1 - (3 - (8 - 100)) == -94
