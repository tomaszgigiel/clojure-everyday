
C:\Users\tgigiel\Documents\workspace-clojure\quizzes\batch\msdos>pushd C:\Users\tgigiel\Documents\workspace-clojure\quizzes\batch\msdos\ 

C:\Users\tgigiel\Documents\workspace-clojure\quizzes\batch\msdos>REM repl.bat 

C:\Users\tgigiel\Documents\workspace-clojure\quizzes\batch\msdos>call run-java-interop.bat  0<a-key-press-in-a-ms-dos-batch-file.txt 

C:\Users\tgigiel\Documents\workspace-clojure\quizzes\batch\msdos>md "\Users\tgigiel\_delete_content\" 
A subdirectory or file \Users\tgigiel\_delete_content\ already exists.

C:\Users\tgigiel\Documents\workspace-clojure\quizzes\batch\msdos>pushd C:\Users\tgigiel\Documents\workspace-clojure\quizzes\batch\msdos\\..\.. 

C:\Users\tgigiel\Documents\workspace-clojure\quizzes>REM rmdir /s /q target 

C:\Users\tgigiel\Documents\workspace-clojure\quizzes>call lein with-profile interop do clean, uberjar 
Compiling pl.tomaszgigiel.quizzes.cmd
Compiling pl.tomaszgigiel.quizzes.core
Compiling pl.tomaszgigiel.quizzes.others.myclojureforjava
Compiling pl.tomaszgigiel.quizzes.parser
Compiling pl.tomaszgigiel.quizzes.quiz
Compiling pl.tomaszgigiel.utils.misc
Compiling pl.tomaszgigiel.utils.resources
Created C:\Users\tgigiel\Documents\workspace-clojure\quizzes\target\uberjar+interop\quizzes.jar
Created C:\Users\tgigiel\Documents\workspace-clojure\quizzes\target\uberjar\quizzes-uberjar.jar
3
Press any key to continue . . . 
A subdirectory or file \Users\tgigiel\_delete_content\ already exists.
<p style="text-align:left;">Show that complex types are functions of their elements.</p>	<ol style="text-align:left;"><li>(= ([:a :b] 0) :a) "vector is a function, index 0 is an argument"</li><li>(= (map [:a :b :c :d :e] [0 2 4]) [:a :c :e]) "passing a vector as a function argument"</li></ol>
<p style="text-align:left;">Create custom dynamic OO system</p>	<ol style="text-align:left;"><li>"define a prototype instance to serve as your class"</li><li>"use this to define your methods, plus any default values"</li><li>(def person-class {:get-full-name (fn [this] (str (:first-name this) " " (:last-name this)))})</li><li>"define an instance by merging member variables into the class"</li><li>(def john (merge person-class  {:first-name "John" :last-name "Smith"}))</li><li>(= ((:get-full-name john) john) "John Smith")</li><li>"added bonus - prototype-based inheritance for free!"</li><li>(def mary (merge john {:first-name "Mary"}))</li><li>(= ((:get-full-name mary) mary) "Mary Smith")</li></ol>
<p style="text-align:left;">Create a closure (function)</p>	<ol style="text-align:left;"><li>(defn messenger-builder [greeting] (fn [who] (str greeting who))) "closes over greeting"</li><li>(def hello-er (messenger-builder "Hello ")) "greeting provided here, then goes out of scope"</li><li>(= (hello-er "world!") "Hello world!") "greeting value still available because hello-er is a closure"</li></ol>
<p style="text-align:left;">Create a closure (atom)</p>	<ol style="text-align:left;"><li>(def foo (let [counter (atom 0)] (fn [] (do (swap! counter inc) @counter)))) "closes over counter, counter goes out of scope"</li><li>(= (foo) 1) "counter value still available because foo is a closure"</li><li>(= (foo) 2) "foo holds a reference to counter"</li><li>(= (foo) 3) "counter will not be garbage-collected as long as foo is needed"</li></ol>
<p style="text-align:left;">Create function using composition.</p>	<ol style="text-align:left;"><li>(= ((comp first rest rest) [1 2 3]) 3) "built from existing parts using the comp (compose) function"</li><li>(= (def third (comp first rest rest)))</li><li>(= (third [1 2 3]) 3)</li><li>(defn fnth [n] (apply comp (cons first (take (dec n) (repeat rest))))) "the function fnth builds new functions on the fly based on its arguments"</li><li>(= ((fnth 3 )[1 2 3]) 3)</li></ol>
<p style="text-align:left;">When are more than one open parenthesis in a row?</p>	<ol style="text-align:left;"><li>(= ((comp first rest rest) [1 2 3]) 3) "it is almost always because a function is creating and returning a function that is called immediately"</li><li>(= ((partial + 5) 100 200) 305)</li></ol>
<p style="text-align:left;">When to use the comp (compose) function?</p>	<ol style="text-align:left;"><li>(= (map (comp keyword #(.toLowerCase %) name) '(a B C)) '(:a :b :c)) "if you need a function that applies a number of functions serially to the return of the former"</li></ol>
<p style="text-align:left;">Create function using partial function.</p>	<ol style="text-align:left;"><li>(= ((partial + 5) 100 200) 305) "built from the partial application of another function"</li><li>(def sort-by-some-ratio (partial sort-by #(/ (:x %) (:y %))))</li><li>(= (sort-by-some-ratio [{:x 1 :y 1} {:x 1 :y 2} {:x 1 :y 3}]) [{:x 1 :y 3} {:x 1 :y 2} {:x 1 :y 1}])</li></ol>
<p style="text-align:left;">Write equivalent to ((partial + 5) 100 200) with apply.</p>	<ol style="text-align:left;"><li>(= ((partial + 5) 100 200) (#(apply + 5 %&) 100 200) 305)</li></ol>
<p style="text-align:left;">How to implement currying in clojure?</p>	<ol style="text-align:left;"><li>(= ((defn add [a b c] (+ a b c)) 1 2 3) 6) "the function"</li><li>(= ((((defn add-curried [a] (fn [b] (fn [c] (+ a b c)))) 1) 2) 3) 6) "the curried version"</li></ol>
<p style="text-align:left;">How to implement automatic currying in clojure?</p>	<ol style="text-align:left;"><li>"use Fluokitten"</li><li>"e.g. [uncomplicate/fluokitten \"0.9.1\"]"</li><li>"(:require [uncomplicate.fluokitten.core :as fluokitten])"</li><li>"(curry f)"</li><li>"(curry f arity)"</li><li>(= ((((fluokitten/curry + 3) 1) 2) 3) 6)</li><li>(= ((fluokitten/curry +) 1 2 3) 6)</li></ol>
<p style="text-align:left;">Create function using complement.</p>	<ol style="text-align:left;"><li>((complement even?) 1) "takes a function that returns a truthy value and returns the opposite truthy value"</li></ol>
<p style="text-align:left;">Write equivalent to (complement even?) 2) with comp.</p>	<ol style="text-align:left;"><li>(= ((complement even?) 1) ((comp not even?) 1) (#(not (even? %)) 1))</li></ol>
<p style="text-align:left;">Example that a function is data.</p>	<ol style="text-align:left;"><li>"clojure.test stores and validates unit tests in the metadata of a var holding a function"</li><li>(defn foo {:test (fn [] (assert (= (foo) "foo")))} [] "foo")</li><li>(test #'foo)</li></ol>
<p style="text-align:left;">How to assign metadata to a function using the defn macro?</p>	<ol style="text-align:left;"><li>(defn foo {:something true :something-else true} [] "foo")</li><li>(defn ^:something ^:something-else foo [] "foo")</li><li>(defn ^{:something true, :something-else true} foo [] "foo")</li><li>(defn foo ([] "foo") {:something true :something-else true})</li></ol>
<p style="text-align:left;">Example use of functions as argument</p>	<ol style="text-align:left;"><li>(= (map second [[:a 3] [:b 2] [:c 1]]) [3 2 1])</li><li>(= (reduce #(conj %1 (second %2)) [] [[:a 3] [:b 2] [:c 1]]) [3 2 1])</li><li>(= (filter #(-> % second odd?) [[:a 3] [:b 2] [:c 1]]) [[:a 3] [:c 1]])</li><li>(= (sort-by second [[:a 3] [:b 2] [:c 1]]) [[:c 1] [:b 2] [:a 3]])</li></ol>
<p style="text-align:left;">Sort rows based on selected columns.</p>	<ol style="text-align:left;"><li>(defn columns [column-names] (fn [row] (vec (map row column-names))))</li><li>(= ((columns [:x :z]) {:x 1 :y 2 :z 3}) [1 3])</li><li>(= (compare [1 3] [2 3]) -1) "vector is a closure function, so it implements the java.util.Comparator interface"</li><li>"sort-by uses compare"</li><li>(= (sort-by (columns [:x :z]) [{:x 2 :y 3 :z 2}{:x 2 :y 2 :z 1}{:x 1 :y 1 :z 3}]) [{:x 1 :y 1 :z 3}{:x 2 :y 2 :z 1}{:x 2 :y 3 :z 2}])</li></ol>
<p style="text-align:left;">Example of a function with named arguments.</p>	<ol style="text-align:left;"><li>(defn slope [& {:keys [p1 p2] :or {p1 [0 0] p2 [1 1]}}] (float (/ (- (p2 1) (p1 1)) (- (p2 0) (p1 0)))))</li><li>(= (slope :p1 [4 15] :p2 [3 21]) -6.0)</li><li>(= (slope :p2 [2 1]) 0.5)</li><li>(= (slope) 1.0)</li></ol>
<p style="text-align:left;">Which mechanism forms the basis for named parameters?</p>	<ol style="text-align:left;"><li>"the destructuring mechanism"</li></ol>
<p style="text-align:left;">How to constrain function with pre- or postconditions?</p>	<ol style="text-align:left;"><li>(defn foo [a b] {:pre [(int? a) (int? b) (not= b 0)] :post [(even? %)]} (/ a b))</li><li>(= (foo 2 1) 2)</li></ol>
<p style="text-align:left;">How to turn off :pre and :post checks for a specific file?</p>	<ol style="text-align:left;"><li>"- add the line (set! *assert* false) to a source file"</li><li>"- somewhere near the top"</li><li>"- but after the namespace declaration"</li></ol>
<p style="text-align:left;">How to use assert instead pre- or postconditions?</p>	<ol style="text-align:left;"><li>(defn foo [a b] (assert (and (int? a) (int? b) (not= b 0))) (let [r (/ a b)] (assert (even? r)) r))</li><li>(= (foo 2 1) 2)</li></ol>
<p style="text-align:left;">Example of decoupling assertions from functions.</p>	<ol style="text-align:left;"><li>(defn put-things [m] (into m {:meat "beef" :veggie "broccoli"}))</li><li>(defn vegan-constraints [f m] {:pre [(:veggie m)] :post [(:veggie %) (nil? (:meat %))]} (f m))</li><li>(defn balanced-diet [f m] {:post [(:meat %) (:veggie %)]} (f m))</li><li>(= {:fruit "apple" :meat "beef" :veggie "broccoli"} (balanced-diet put-things {:fruit "apple"}))</li></ol>
<p style="text-align:left;">What is main adventage of pulling out the assertions into a wrapper function?</p>	<ol style="text-align:left;"><li>"you detach some domain-specific requirements from a potentially globally useful function and isolate them in aspects"</li><li>"you can mix in any implementation you please, knowing that as long as it fulfills the contract its interposition is transparent"</li></ol>
lut 13, 2020 6:29:27 PM clojure.tools.logging$eval136$fn__139 invoke
INFO: ok
Press any key to continue . . . 
A subdirectory or file \Users\tgigiel\_delete_content\ already exists.
Compiling pl.tomaszgigiel.quizzes.core
<p style="text-align:left;">Show that complex types are functions of their elements.</p>	<ol style="text-align:left;"><li>(= ([:a :b] 0) :a) "vector is a function, index 0 is an argument"</li><li>(= (map [:a :b :c :d :e] [0 2 4]) [:a :c :e]) "passing a vector as a function argument"</li></ol>
<p style="text-align:left;">Create custom dynamic OO system</p>	<ol style="text-align:left;"><li>"define a prototype instance to serve as your class"</li><li>"use this to define your methods, plus any default values"</li><li>(def person-class {:get-full-name (fn [this] (str (:first-name this) " " (:last-name this)))})</li><li>"define an instance by merging member variables into the class"</li><li>(def john (merge person-class  {:first-name "John" :last-name "Smith"}))</li><li>(= ((:get-full-name john) john) "John Smith")</li><li>"added bonus - prototype-based inheritance for free!"</li><li>(def mary (merge john {:first-name "Mary"}))</li><li>(= ((:get-full-name mary) mary) "Mary Smith")</li></ol>
<p style="text-align:left;">Create a closure (function)</p>	<ol style="text-align:left;"><li>(defn messenger-builder [greeting] (fn [who] (str greeting who))) "closes over greeting"</li><li>(def hello-er (messenger-builder "Hello ")) "greeting provided here, then goes out of scope"</li><li>(= (hello-er "world!") "Hello world!") "greeting value still available because hello-er is a closure"</li></ol>
<p style="text-align:left;">Create a closure (atom)</p>	<ol style="text-align:left;"><li>(def foo (let [counter (atom 0)] (fn [] (do (swap! counter inc) @counter)))) "closes over counter, counter goes out of scope"</li><li>(= (foo) 1) "counter value still available because foo is a closure"</li><li>(= (foo) 2) "foo holds a reference to counter"</li><li>(= (foo) 3) "counter will not be garbage-collected as long as foo is needed"</li></ol>
<p style="text-align:left;">Create function using composition.</p>	<ol style="text-align:left;"><li>(= ((comp first rest rest) [1 2 3]) 3) "built from existing parts using the comp (compose) function"</li><li>(= (def third (comp first rest rest)))</li><li>(= (third [1 2 3]) 3)</li><li>(defn fnth [n] (apply comp (cons first (take (dec n) (repeat rest))))) "the function fnth builds new functions on the fly based on its arguments"</li><li>(= ((fnth 3 )[1 2 3]) 3)</li></ol>
<p style="text-align:left;">When are more than one open parenthesis in a row?</p>	<ol style="text-align:left;"><li>(= ((comp first rest rest) [1 2 3]) 3) "it is almost always because a function is creating and returning a function that is called immediately"</li><li>(= ((partial + 5) 100 200) 305)</li></ol>
<p style="text-align:left;">When to use the comp (compose) function?</p>	<ol style="text-align:left;"><li>(= (map (comp keyword #(.toLowerCase %) name) '(a B C)) '(:a :b :c)) "if you need a function that applies a number of functions serially to the return of the former"</li></ol>
<p style="text-align:left;">Create function using partial function.</p>	<ol style="text-align:left;"><li>(= ((partial + 5) 100 200) 305) "built from the partial application of another function"</li><li>(def sort-by-some-ratio (partial sort-by #(/ (:x %) (:y %))))</li><li>(= (sort-by-some-ratio [{:x 1 :y 1} {:x 1 :y 2} {:x 1 :y 3}]) [{:x 1 :y 3} {:x 1 :y 2} {:x 1 :y 1}])</li></ol>
<p style="text-align:left;">Write equivalent to ((partial + 5) 100 200) with apply.</p>	<ol style="text-align:left;"><li>(= ((partial + 5) 100 200) (#(apply + 5 %&) 100 200) 305)</li></ol>
<p style="text-align:left;">How to implement currying in clojure?</p>	<ol style="text-align:left;"><li>(= ((defn add [a b c] (+ a b c)) 1 2 3) 6) "the function"</li><li>(= ((((defn add-curried [a] (fn [b] (fn [c] (+ a b c)))) 1) 2) 3) 6) "the curried version"</li></ol>
<p style="text-align:left;">How to implement automatic currying in clojure?</p>	<ol style="text-align:left;"><li>"use Fluokitten"</li><li>"e.g. [uncomplicate/fluokitten \"0.9.1\"]"</li><li>"(:require [uncomplicate.fluokitten.core :as fluokitten])"</li><li>"(curry f)"</li><li>"(curry f arity)"</li><li>(= ((((fluokitten/curry + 3) 1) 2) 3) 6)</li><li>(= ((fluokitten/curry +) 1 2 3) 6)</li></ol>
<p style="text-align:left;">Create function using complement.</p>	<ol style="text-align:left;"><li>((complement even?) 1) "takes a function that returns a truthy value and returns the opposite truthy value"</li></ol>
<p style="text-align:left;">Write equivalent to (complement even?) 2) with comp.</p>	<ol style="text-align:left;"><li>(= ((complement even?) 1) ((comp not even?) 1) (#(not (even? %)) 1))</li></ol>
<p style="text-align:left;">Example that a function is data.</p>	<ol style="text-align:left;"><li>"clojure.test stores and validates unit tests in the metadata of a var holding a function"</li><li>(defn foo {:test (fn [] (assert (= (foo) "foo")))} [] "foo")</li><li>(test #'foo)</li></ol>
<p style="text-align:left;">How to assign metadata to a function using the defn macro?</p>	<ol style="text-align:left;"><li>(defn foo {:something true :something-else true} [] "foo")</li><li>(defn ^:something ^:something-else foo [] "foo")</li><li>(defn ^{:something true, :something-else true} foo [] "foo")</li><li>(defn foo ([] "foo") {:something true :something-else true})</li></ol>
<p style="text-align:left;">Example use of functions as argument</p>	<ol style="text-align:left;"><li>(= (map second [[:a 3] [:b 2] [:c 1]]) [3 2 1])</li><li>(= (reduce #(conj %1 (second %2)) [] [[:a 3] [:b 2] [:c 1]]) [3 2 1])</li><li>(= (filter #(-> % second odd?) [[:a 3] [:b 2] [:c 1]]) [[:a 3] [:c 1]])</li><li>(= (sort-by second [[:a 3] [:b 2] [:c 1]]) [[:c 1] [:b 2] [:a 3]])</li></ol>
<p style="text-align:left;">Sort rows based on selected columns.</p>	<ol style="text-align:left;"><li>(defn columns [column-names] (fn [row] (vec (map row column-names))))</li><li>(= ((columns [:x :z]) {:x 1 :y 2 :z 3}) [1 3])</li><li>(= (compare [1 3] [2 3]) -1) "vector is a closure function, so it implements the java.util.Comparator interface"</li><li>"sort-by uses compare"</li><li>(= (sort-by (columns [:x :z]) [{:x 2 :y 3 :z 2}{:x 2 :y 2 :z 1}{:x 1 :y 1 :z 3}]) [{:x 1 :y 1 :z 3}{:x 2 :y 2 :z 1}{:x 2 :y 3 :z 2}])</li></ol>
<p style="text-align:left;">Example of a function with named arguments.</p>	<ol style="text-align:left;"><li>(defn slope [& {:keys [p1 p2] :or {p1 [0 0] p2 [1 1]}}] (float (/ (- (p2 1) (p1 1)) (- (p2 0) (p1 0)))))</li><li>(= (slope :p1 [4 15] :p2 [3 21]) -6.0)</li><li>(= (slope :p2 [2 1]) 0.5)</li><li>(= (slope) 1.0)</li></ol>
<p style="text-align:left;">Which mechanism forms the basis for named parameters?</p>	<ol style="text-align:left;"><li>"the destructuring mechanism"</li></ol>
<p style="text-align:left;">How to constrain function with pre- or postconditions?</p>	<ol style="text-align:left;"><li>(defn foo [a b] {:pre [(int? a) (int? b) (not= b 0)] :post [(even? %)]} (/ a b))</li><li>(= (foo 2 1) 2)</li></ol>
<p style="text-align:left;">How to turn off :pre and :post checks for a specific file?</p>	<ol style="text-align:left;"><li>"- add the line (set! *assert* false) to a source file"</li><li>"- somewhere near the top"</li><li>"- but after the namespace declaration"</li></ol>
<p style="text-align:left;">How to use assert instead pre- or postconditions?</p>	<ol style="text-align:left;"><li>(defn foo [a b] (assert (and (int? a) (int? b) (not= b 0))) (let [r (/ a b)] (assert (even? r)) r))</li><li>(= (foo 2 1) 2)</li></ol>
<p style="text-align:left;">Example of decoupling assertions from functions.</p>	<ol style="text-align:left;"><li>(defn put-things [m] (into m {:meat "beef" :veggie "broccoli"}))</li><li>(defn vegan-constraints [f m] {:pre [(:veggie m)] :post [(:veggie %) (nil? (:meat %))]} (f m))</li><li>(defn balanced-diet [f m] {:post [(:meat %) (:veggie %)]} (f m))</li><li>(= {:fruit "apple" :meat "beef" :veggie "broccoli"} (balanced-diet put-things {:fruit "apple"}))</li></ol>
<p style="text-align:left;">What is main adventage of pulling out the assertions into a wrapper function?</p>	<ol style="text-align:left;"><li>"you detach some domain-specific requirements from a potentially globally useful function and isolate them in aspects"</li><li>"you can mix in any implementation you please, knowing that as long as it fulfills the contract its interposition is transparent"</li></ol>
lut 13, 2020 6:29:41 PM clojure.tools.logging$eval155$fn__158 invoke
INFO: ok
Press any key to continue . . . 
A subdirectory or file \Users\tgigiel\_delete_content\ already exists.
Compiling pl.tomaszgigiel.quizzes.core

lein test pl.tomaszgigiel.quizzes.packs.joc.joc-06-03-test

Ran 5 tests containing 20 assertions.
0 failures, 0 errors.
Press any key to continue . . . 
A subdirectory or file \Users\tgigiel\_delete_content\ already exists.
Syntax error compiling at (pl\tomaszgigiel\quizzes\packs\clojure_recursion_test.clj:16:42).
Unable to resolve symbol: pow-mundane in this context

Full report at:
C:\Users\tgigiel\AppData\Local\Temp\2\clojure-2799376461414663759.edn
Tests failed.
Press any key to continue . . . 
A subdirectory or file \Users\tgigiel\_delete_content\ already exists.
Compiling pl.tomaszgigiel.quizzes.core
Compiling pl.tomaszgigiel.quizzes.core
Created C:\Users\tgigiel\Documents\workspace-clojure\quizzes\target\uberjar\quizzes.jar
Created C:\Users\tgigiel\Documents\workspace-clojure\quizzes\target\uberjar\quizzes-uberjar.jar
Press any key to continue . . . 
Press any key to continue . . . 
